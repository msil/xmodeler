<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter>
  <title>Clients</title>

  <para></para>

  <section>
    <title>Introduction</title>

    <para>XMF is a standalone kernel that in its vanilla form has no means of
    interacting with the environment outside of its own world. There are
    numerous ways of providing this interaction including file based IO and
    XML based IO. A further way of providing this interaction which is
    particularly well suited, but not limited, to user interfaces is to write
    a client which sits between the user interface and the XMF kernel. This is
    the approach taken to implementing the Mosaic components of XMF-Mosaic and
    XMF (specifically its underlying operating system XOS) provides a number
    of mechanisms to support this activity. These mechanisms are discussed and
    illustrated in this document.</para>
  </section>

  <section>
    <title>Introduction</title>

    <para>XMF supports three different types of clients.</para>

    <para>Message : A message based client communicates by passing structured
    messages to and from the kernel. Currently message based clients must be
    written in Java as Eclipse plugins so that they are able to utilise
    external Java libraries provided by XMF-Mosaic.</para>

    <para>Internal : An Internal client is written in Java and communicates
    over stream based data. Unlike Message based clients, internal clients
    have no inherent messaging architecture although one could be easily built
    on this foundation. Message based clients must be written in Java and are
    run in the same process as the XMF kernel.</para>

    <para>External : An external client are like internal clients and
    communicate over stream based data. However external clients connect to
    the XMF kernel (via XOS) using socket based communication. This means that
    external clients can be written in any language that supports socket
    communication and such clients can also be run using a distributed
    architecture.</para>

    <section>
      <title>Message Based Client</title>

      <para>This section describes how to construct both the Java (Eclipse)
      and XMF implementation for a message based client. This is done by way
      of a traffic light example. Such a style of tool might be used as a tool
      to simulate a model using an external GUI. The implementation of this
      client assumes a certain level of Eclipse knowledge, further information
      about Eclipse can be found in Eclipse's help system or at
      http://www.eclipse.org.</para>
    </section>

    <section>
      <title>Eclipse Implementation</title>

      <section>
        <title>Dependencies</title>

        <para>A message based client is constructed as an Eclipse plugin.
        Since it is necessary to use libraries provided by XMF-Mosaic, the new
        client needs to declare this dependencies. The simplest way of doing
        this is to import the XMF plugins com.ceteva.client and
        com.ceteva.xmf into an Eclipse workspace, and then in the newly
        created plugin declare the dependencies as illustrated below.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="Images/javaPluginXML.jpg" />
          </imageobject>
        </mediaobject>

        <para>Generally speaking, message based clients should connect to XOS
        prior to the machine being started. Therefore the plugin must connect
        as soon as it is started. This is achieved by way of the Eclipse early
        startup interface which must be declared in the as illustrated below.
        We will show later in this document how this facilitates the early
        connection of the client.</para>
      </section>

      <section>
        <title>Basic structure</title>

        <para>The figure below illustrates a basic structure of message client
        is shown below. A message client must extend com.ceteva.client.Client
        and implement a number of abstract methods. The constructor for the
        client must pass as an argument the name that this client is going to
        identify itself as, in this case org.myproject.trafficlights. A method
        must be implemented to process messages passed to the client, a
        boolean return value indicates whether or not the passed message was
        successfully processed. Finally the setEventHandler method is called
        by XOS to set the handler for events, the general pattern is to record
        the handler so that it can be usefully referenced in the future. In
        this case the handler is scoped over the class.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="Images/javaClientSkeleton.jpg" />
          </imageobject>
        </mediaobject>
      </section>

      <section>
        <title>Handling Messages</title>

        <para>A message consists of a name and a number of arguments. The
        client we are building can potentially receive three messages: setRed,
        setAmber and setGreen; each message has a single boolean argument. In
        the figure below the incoming message is tested against the three
        possible messages the client can handle. In addition to checking the
        messages name, the messages arity is also checked. The ability to
        check a message's arity enables the same message name to be handled in
        different ways depending on the number of parameters passed.</para>

        <para>In the case of this example the state of the message is simply
        printed to standard output and true is returned to indicate to XOS
        that the message has been successfully processed. If none of the
        message handlers match then the false value is returned.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="Images/javaMessageHandler.jpg" />
          </imageobject>
        </mediaobject>
      </section>

      <section>
        <title>Handling Calls</title>

        <para>Sometimes it is necessary for a client to be asked a question to
        which it returns an answer. For example XMF may ask its traffic light
        client the current value of the red light. This scenario is provided
        by the call mechanism which is like a message but rather than the
        return value indicating successful processing, it is an actual value
        that XMF requires. When an XMF call is made then it switches to
        synchronous communication rather than the aysynchronous communication
        of regular message processing.</para>

        <para>The figure below illustrates the pattern for implementing call
        handlers. The method processCall is overridden to provide handlers for
        the call. Return values must be of type Value and are formed by
        passing primitive types into the constructor of Value. In this case a
        null value is returned to indicate failure to handle the call.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="Images/javaCallHandler.jpg" />
          </imageobject>
        </mediaobject>
      </section>

      <section>
        <title>Raising Events</title>

        <para>A client can send information to XMF by sending messages on the
        event handler. In the example below a java method is implemented which
        sends an event reporting the number of cars in a queue. An event is
        constructed by asking the handler for a new event when supplied with
        the event's and arity. The parameter values are then assigned to the
        newly constructed event, in this case this is a single parameter
        denotating the length of the queue. Finally the event is raised on the
        handler. </para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="Images/javaEventRaising.jpg" />
          </imageobject>
        </mediaobject>
      </section>

      <section>
        <title>Registering the Client</title>

        <para>As discussed at the beginning of this section, a message client
        should generally connect to XMF prior to the machine being started.
        The pattern for doing this is illustrated below in the context of the
        traffic light example, the early startup method is called as a result
        of the plugin's class implementing the IStartup interface (and the
        declarative extension shown earlier in the plugin.xml file). This
        method creates a new instance of the client and informs XOS of this
        client by passing both the client's name and the client itself.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="Images/JavaPlugin.jpg" />
          </imageobject>
        </mediaobject>
      </section>
    </section>

    <section>
      <title>XMF Implementation</title>

      <section>
        <title>Architecture</title>

        <para>In this section we will show how a client can be modelled in XMF
        that interfaces to the Eclipse client described in the previous
        section.</para>

        <para>The first step is to create a package to put the xmf
        client.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="Images/xmfClientPackage.jpg" />
          </imageobject>
        </mediaobject>

        <para>The general architecture for an XMF message based client is
        shown below. An event handler is defined which specialises the
        abstract class Root::Clients::EventHandler, this describes how events
        are received by the XMF client. Similarly a command interpreter is
        defined which specialises the abstract class
        Root::Clients::CommandInterpreter, this describes how both messages
        (commands) and calls are sent to the Java client and how. A client is
        then defined which specialises Root::Clients::Clients, this acts as a
        wrapper to both the event handler and the command interpreter. The
        next sections will examine each of these components in detail in the
        context of the traffic light example.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="Images/xmfArchitecture.jpg" />
          </imageobject>
        </mediaobject>
      </section>

      <section>
        <title>Sending Messages and Making Calls</title>

        <para>Messages are sent, and calls are made, in the command
        interpreter. Generally speaking each message is wrapped in an
        operation and the body of the operation contains a send command of the
        form illustrated in the following example:</para>

        <para><programlisting>@Operation setRed(state:Boolean)
  @SendCommand(self)
    setRed(state)
  end
end</programlisting>The body of the send command contains the command named
        and the parameter values to bind to the command enclosed in brackets
        (and separated by commas where there are more than one). In the above
        example, when the setRed/1 operation is called then the setRed(..)
        message is sent to the client. The figure below shows the command
        interpreter implementing each of the different message types supported
        by the Java client.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="Images/xmfClientInterpreter.jpg" />
          </imageobject>
        </mediaobject>

        <para>The above figure also gives an example of a call command which
        is exactly the same for as a send command but is wrapped as a call
        command. It is important to note that when a send command is made, the
        message is sent and code execution continues regardless of whether the
        message was successfully processed. By contrast when a call command is
        made, code execution halts and waits for the return value of the call
        command prior to continuing execution. The getRed() operation will
        return the value of the result of the getRed() call command (a boolean
        value).</para>
      </section>

      <section>
        <title>Handling Events</title>

        <para>Events are processed in an event handler, the standard pattern
        for writing these is shown below. When the event handler receives an
        event, it passes the event and its parameters to the operation
        dispatchEvent. This operation should be overridden to perform client
        specific event handling. In the figure below the incoming event is
        tested to see whether it has the name reportCarQueue, if so it is
        passed to the readCarQueue method and simply printed to standard
        output.</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="Images/xmfClientHandler.jpg" />
          </imageobject>
        </mediaobject>

        <para>As we we will demonstrate in the next section, the event handler
        is run in its own thread. This allows the event handler to process
        events regardless of what is happening in the main thread of
        execution.</para>
      </section>

      <section>
        <title>Putting it Together</title>

        <para>The figure below shows the standard approach to defining an XMF
        client using the command interpreter and event handler. The
        constructor for the client sets the clients name, this must match the
        name defined in the Java client which in this case is
        org.myproject.trafficLights. As shown below, the constructor then
        creates an instance of both the command interpreter and the event
        handler (note that if communication is uni-directional either the
        command interpreter or event handler may be omitted as
        appropriate).</para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="Images/xmfClient.jpg" />
          </imageobject>
        </mediaobject>

        <para>In addition to constructing the client, the above example
        defines a futher operation runLights/0 which simply tests that the
        command interpreter works by sending a number of messages.</para>
      </section>

      <section>
        <title>Starting the Communication</title>

        <para>In order to start the communication between XMF and the Java
        client it is necessary to take two steps. The first step involves
        informing XOS about the new Java client by adding details to its
        startup.txt file which can be found in the directory
        XMF_INSTALL/xmfMosaic/plugins/com.ceteva.xmf_x.x.x/Server (replacing
        the x.x.x with the current version number of XMF, if there are
        multiple versions then consider the largest number to be the most
        recent). In this file you will see details of the existing Mosaic
        clients, simply append the new client to this list as illustrated
        below:</para>

        <programlisting>-message :com.ceteva.mosaic:wait
...
-message :org.myproject.trafficlights:wait
...</programlisting>

        <para>The final step is to create an instance of the XMF client and
        add it to XMF's client manager as shown below. If the client has an
        event handler as in the traffic light example, then it is necessary to
        start the event handler in its own independent thread so that it can
        handle events independently of the main thread of execution. This can
        be done using the pattern demonstrated below where a call to
        Client::start/0 is wrapped in a fork. The code below also runs the
        example operation defined in the previous section. </para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="Images/xmfRun.jpg" />
          </imageobject>
        </mediaobject>
      </section>
    </section>
  </section>

  <section>
    <title>Internal Clients</title>

    <para></para>
  </section>

  <section>
    <title>External (Socket Based) Clients</title>

    <para></para>
  </section>
</chapter>